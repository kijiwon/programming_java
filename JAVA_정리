1. 클래스 - 데이터와 메소드를 하나로 묶은 구조(틀)
    객체를 생성하기 위한 설계도로, 상태와 메소드를 정의 -> 생성자로 호출하기 전까지는 읽히지 않음
    ○ 기본 구성 요소
        •필드: 객체의 속성을 저장하는 변수. 객체 생성 시 메모리에 할당됨
        •메소드: 객체의 동작을 정의하는 함수
        •생성자: 객체 생성 시 호출되는 메소드. 클래스 이름과 동일 + 반환형 없음
    ○ 클래스 정의
        •클래스 정의
            class Car {
                // 필드
                String model;
                int speed;
                // 생성자 -> 클래스명과 동일
                Car(String model){
                        this.model = model;
                        this.speed = 0; -> 초기값 설정
                }
                // 메소드
                void accelerate(int increment){
                    speed += increment;
                }
                void displayInfo(){
                    System.out.println("Model: " + model + ", Speed: " + speed);
                }
            }

2. 객체 - 클래스를 기반으로 생성된 실체 like 인스턴스
    •속성(Properties): 객체가 가지는 데이터나 상태
    •행위(Behaviors): 객체가 수행할 동작
    •인스턴스(Instance): 클래스에서 생성된 구체적인 객체. 클래스→추상적 정의
    ○ 객체 생성
        public class Main{
            public static void main(String[] args){
                Car car1 = new Car("Sonata"); -> Car("Sonata") => car1.model = "Sonata"  car1.speed = 0;
                car1.accelerate(50); -> car1.speed = 50;
                car1.displayInfo(); -> Model: Sonata, Speed: 50
            }
        }

3. 생성자(Constructor) - 인스턴스를 생성하기 위해 호출하는 메소드
    ○ 특징
        •클래스 이름과 동일함
        •반환값을 가지지 않음 → 반환형 명시x
        •객체가 생도되는 시점에 자동으로 호출됨
        •매개변수의 종류와 개수를 다르게 하여 여러 개 정의할 수 있음
        •개발자가 생성자를 정의하지 않는 경우 자바 컴파일러가 매개변수가 없는 기본 생성자를 자동으로 제공함
    ○ 생성자 정의 및 호출
        class Person {
            String name;
            int age;
            // 기본 생성자
            Person(){
                name = "Unknown";
                age = 0;
                System.out.println("기본 생성자 호출.");
            }
        }
        public class Main(){
            public static void main(String[] args){
                Person person = new Person(); // 생성자 호출
                System.out.println("Name: " + person.name + ", Age: ", + person.age); // Name: Unknown, Age: 0
            }
        }
    ○ 생성자 오버로딩 - 동일한 이름의 생성자를 여러개 만들었을 때
        class Person {
            String name;
            int age;
            // 기본 생성자
            Person(){
                name = "Unknown";
                age = 0;
                System.out.println("기본 생성자 호출.");
            }
            // 매개변수가 있는 생성자
            Person(String name, int age){
                this.name = name;
                this.age = age;
            }
        }
        public class Main(){
            public static void main(String[] args){
                Person person1 = new Person(); // 기본 생성자 호출
                Person person2 = new Person("Alice", 25); // 매개변수가 있는 생성자 호출
                System.out.println("P1: " + person1.name + ", ", + person1.age); // Unknown, 0
                System.out.println("P2: " + person2.name + ", ", + person2.age); // Alice, 25
            }
        }
    
4. 접근지정자 - 클래스의 멤버에 대한 접근 벙위를 정의하는 키워드
    ○ 종류
        •public - 접근 제한 없음
        •protected - 동일 패키지와 상속받은 클래스 → 클래스, 패키지, 상속
        •default - 동일 패키지 → 클래스, 패키지
        •private - 동일 클래스 → 클래스
    •다른 패키지에서 접근할 경우 예제
        package mypackage;
        public class Parent(){
            public int pubVar = 1;
            protected int protVar = 2;
            int defVar = 3;
            private int privVar = 4;
            
            public void display(){
                System.out.println("Public: " + pubVar); 
                System.out.println("Protected: " + protVar); 
                System.out.println("Default: " + defVar); 
                System.out.println("Private: " + privVar); 
            }
        }

        package otherpackage;
        import mypackage.Parent;
        public class Child extends Parent{ // Parent를 상속해 Child를 생성
            public void show(){
                System.out.println("Public: " + pubVar); // 접근 가능 
                System.out.println("Protected: " + protVar); // 상속 관계 -> 접근 가능
                System.out.println("Default: " + defVar); // 접근 불가능 -> 오류
                System.out.println("Private: " + privVar); // 접근 불가능 -> 오류
            }
        }

5. 