1. 클래스 - 데이터와 메소드를 하나로 묶은 구조(틀)
    객체를 생성하기 위한 설계도로, 상태와 메소드를 정의 -> 생성자로 호출하기 전까지는 읽히지 않음
    ○ 기본 구성 요소
        •필드: 객체의 속성을 저장하는 변수. 객체 생성 시 메모리에 할당됨
        •메소드: 객체의 동작을 정의하는 함수
        •생성자: 객체 생성 시 호출되는 메소드. 클래스 이름과 동일 + 반환형 없음
    ○ 클래스 정의
        •클래스 정의
            class Car {
                // 필드
                String model;
                int speed;
                // 생성자 -> 클래스명과 동일
                Car(String model){
                        this.model = model;
                        this.speed = 0; -> 초기값 설정
                }
                // 메소드
                void accelerate(int increment){
                    speed += increment;
                }
                void displayInfo(){
                    System.out.println("Model: " + model + ", Speed: " + speed);
                }
            }

2. 객체 - 클래스를 기반으로 생성된 실체 like 인스턴스
    •속성(Properties): 객체가 가지는 데이터나 상태
    •행위(Behaviors): 객체가 수행할 동작
    •인스턴스(Instance): 클래스에서 생성된 구체적인 객체. 클래스→추상적 정의
    ○ 객체 생성
        public class Main{
            public static void main(String[] args){
                Car car1 = new Car("Sonata"); -> Car("Sonata") => car1.model = "Sonata"  car1.speed = 0;
                car1.accelerate(50); -> car1.speed = 50;
                car1.displayInfo(); -> Model: Sonata, Speed: 50
            }
        }

3. 생성자(Constructor) - 인스턴스를 생성하기 위해 호출하는 메소드
    ○ 특징
        •클래스 이름과 동일함
        •반환값을 가지지 않음 → 반환형 명시x
        •객체가 생도되는 시점에 자동으로 호출됨
        •매개변수의 종류와 개수를 다르게 하여 여러 개 정의할 수 있음
        •개발자가 생성자를 정의하지 않는 경우 자바 컴파일러가 매개변수가 없는 기본 생성자를 자동으로 제공함
    ○ 생성자 정의 및 호출
        class Person {
            String name;
            int age;
            // 기본 생성자
            Person(){
                name = "Unknown";
                age = 0;
                System.out.println("기본 생성자 호출.");
            }
        }
        public class Main(){
            public static void main(String[] args){
                Person person = new Person(); // 생성자 호출
                System.out.println("Name: " + person.name + ", Age: ", + person.age); // Name: Unknown, Age: 0
            }
        }
    ○ 생성자 오버로딩 - 동일한 이름의 생성자를 여러개 만들었을 때
        class Person {
            String name;
            int age;
            // 기본 생성자
            Person(){
                name = "Unknown";
                age = 0;
                System.out.println("기본 생성자 호출.");
            }
            // 매개변수가 있는 생성자
            Person(String name, int age){
                this.name = name;
                this.age = age;
            }
        }
        public class Main(){
            public static void main(String[] args){
                Person person1 = new Person(); // 기본 생성자 호출
                Person person2 = new Person("Alice", 25); // 매개변수가 있는 생성자 호출
                System.out.println("P1: " + person1.name + ", ", + person1.age); // Unknown, 0
                System.out.println("P2: " + person2.name + ", ", + person2.age); // Alice, 25
            }
        }
    
4. 접근지정자 - 클래스의 멤버에 대한 접근 벙위를 정의하는 키워드
    ○ 종류
        •public - 접근 제한 없음
        •protected - 동일 패키지와 상속받은 클래스 → 클래스, 패키지, 상속
        •default - 동일 패키지 → 클래스, 패키지
        •private - 동일 클래스 → 클래스
    •다른 패키지에서 접근할 경우 예제
        package mypackage;
        public class Parent(){
            public int pubVar = 1;
            protected int protVar = 2;
            int defVar = 3;
            private int privVar = 4;
            
            public void display(){
                System.out.println("Public: " + pubVar); 
                System.out.println("Protected: " + protVar); 
                System.out.println("Default: " + defVar); 
                System.out.println("Private: " + privVar); 
            }
        }

        package otherpackage;
        import mypackage.Parent;
        public class Child extends Parent{ // Parent를 상속해 Child를 생성
            public void show(){
                System.out.println("Public: " + pubVar); // 접근 가능 
                System.out.println("Protected: " + protVar); // 상속 관계 -> 접근 가능
                System.out.println("Default: " + defVar); // 접근 불가능 -> 오류
                System.out.println("Private: " + privVar); // 접근 불가능 -> 오류
            }
        }

5. 상속과 생성자
    ○ 상속: 부모 클래스의 멤버를 새로운 클래스(자식 클래스)가 물려받아 재사용하고 확장
        •특징
            - 부모 클래스의 필드와 메소드를 자식 클래스가 물려받아 사용할 수 있음
            - 자식 클래스에서 부모 클래스의 기능을 확장하거나 수정해 사용할 수 있음 → 동일한 메소드의 호출이 다양한 결과를 가져옴(다형성)
            - 부모 클래스의 Protected 또는 Public 멤버에만 자식 클래스가 접근 가능
            - 자식 클래스의 형태로는 부모 클래스의 객체를 생성할 수 없음
        •관련 키워드
            ➀extends: 자식 클래스가 부모 클래스를 상속
            ➁super: 부모 클래스의 멤버를 참조
            ➂final: 더 이상 상속 불가능 ex) final class Parent{} → 더 이상 상속 불가능, final void func(){} → 자식 클래스에서 더 이상 오버라이딩 불가능
    
    ○ 상속과 생성자 관계 - 자식 클래스의 생성자가 호출될 때, 반드시 부모 클래스의 생성자가 먼저 호출됨
        •super(): 부모 클래스의 생성자 호출, 반드시 자식 생성자의 첫 줄에 위치. ⭐️ 명시되지 않은 경우 부모 클래스의 기본 생성자 호출 ⭐️
        •this(): 같은 클래스 내의 다른 생성자 호출. super()와 함께 사용할 수 없음

6. 메소드 오버로딩 - 같은 이름의 메소드를 인자만 다르게 하여 중복 정의 → 매개변수의 개수, 타입, 순서가 다름
    •예제
        class Calculator {
            int add(int a, int b){
                return a + b;
            }
            int add(int a, int b, int c){
                return a + b + c;
            }
            double add(double a, double b){
                return a + b;
            }
            double add(int a, double b){
                return a + b;
            }
        }

        public class Main {
            public static void main(String[] args){
                Calculator calc = new Calculator();
                System.out.println(calc.add(10, 20)); // int, int -> 30
                System.out.println(calc.add(10, 20, 30)); // int, int, int -> 60
                System.out.println(calc.add(10.5, 20.5)); // double, double -> 31.0
                System.out.println(calc.add(10, 20.5)); // int, double -> 30.5
            }
        }

7. 메소드 오버라이딩 - 상속 관계에서 부모 클래스에서 정의된 메소드를 자식 클래스에서 다시 재정의
    •메소드 이름, 매개변수 타입 및 개수, 반환 타입이 부모 클래스와 동일해야함
    •@Override 어노테이션을 사용해 오버라이딩을 명시적으로 표시하는 것이 좋음
    •에제
        class Animal {
            void sound(){
                System.out.println("Animal");
            }
        }
        class Dog extends Animal {
            @Override // 부모 클래스의 sound메소드를 오버라이딩
            void sound(){
                System.out.println("Dog");
            }
        }
        public class Main{
            public static void main(String[] args){
                Animal animal = new Animal();
                animal.sound(); // Animal 클래스의 sound 메소드 호출 -> Animal
                Animal dog = new Dog(); // Dog 클래스로 생성, Animal 클래스 형태의 인스턴스
                dog.sound(); // Dog 클래스의 sound 메소드 호출 -> Dog
            }
        }

✏️ 이름 동일 but 매개변수 다름 ⇨ 오버로딩
✏️ 이름 동일 and 매개변수 타입, 개수, 반환 타입 동일 ⇨ 오버라이딩

8. 하이딩 - 상위 클래스의 static 메소드를 하위 클래스에서 같은 이름과 시그니처로 다시 선언
    •static 메소드에서만 발생
    •상위 클래스의 static 메소드와 이름, 매개변수의 시그니처가 같아야함
    •부모 클래스의 static 메소드를 대체하거나 오버라이딩하지 않음
    •예제
        class Parent {
            static void display(){ // static 메소드
                System.out.println("Parent");
            }
        }
        class Child extends Parent{
            static void display(){ // 부모 클래스의 static 메소드를 하이딩
                System.out.println("Child");
            }
        }
        public class Main{
            public void main(String[] args){
                Parent p = new Parent(); // Parent 클래스의 인스턴스
                Parent c1 = new Child(); // Parent 형태의 Child 인스턴스
                Child c2 = new Child(); // Child 클래스의 인스턴스
                p.display(); // Parent 클래스의 display 메소드 호출 -> Parent
                c1.display(); // Parent 형태를 따름 -> Parent 클래스의 display 메소드 호출 -> Parent
                c2.display(); // Child 클래스의 display 메소드 호출 -> Child
            }
        }

9. 변수의 유효범위
    ○ 변수의 종류
        •지역변수: 메소드나 블록 내부에서 선언된 변수. 해당 블록이 실행되는 동안에만 유효함
        •인스턴스 변수(멤버 변수): 클래스 내부에 선언된 함수. 객체가 생성될 때마다 각 객체는 별도의 복사본을 가짐. 객체가 소멸되면 함께 소멸됨
        •클래스 변수(정적 변수): static 키워드로 선언된 변수. 모든 객체가 공유 + 메모리에 적재됨
    ○ 상속 관계에서 변수의 유효범위
        •변수 은닉: 부모 클래스와 자식 클래스에 같은 이름의 변수가 있을 때, 자식 클래스의 변수가 부모 클래스의 변수를 가림. 부모 클래스의 변수는 super 키워드를 사용해 접근
        •변수 접근: 참조 변수의 타입에 따라 접근할 수 있는 변수를 결정
        •메소드에서의 변수 접근: 변수에 접근할 때는 참조 변수의 타입에 따라 결정됨

10. static 변수와 메소드
    ○ static 변수: 클래스의 모든 인스턴스가 공유하는 변수
        •모든 인스턴스에서 동일한 값을 공유함
        •클래스가 메모리에 로드될 때 한 번만 할당됨
    ○ static 메소드: static 키워드가 붙은 메소드
        •클래스의 인스턴스를 생성하지 않고도 호출할 수 있음
        •공통적인 작업(ex. 수학 연산, 문자열 처리 등)을 수행하는 메소드로 자주 사용됨

11. 예외처리 - 프로그램 실행 중 발생할 수 있는 오류를 대비하여 프로그램의 비정상 종료를 방지하고 안정적으로 실행되도록 처리하는 기술
    •예외처리 구조: try-catch-finally
        -try: 예외가 발생할 가능성이 있는 코드 작성
        -catch: 예외가 발생했을 때 실행. 발생한 예외 객체를 매개변수로 받아 처리
        -finally: 예외 발생 여부와 관계 없이 항상 실행
    •예외의 전파: throws 키워드를 사용해 예외를 처리하지 않고 호출한 메소드로 전달할 수 있음
        public void divide(int a, int b) throws ArithmeticException{
            if(b == 0) {
                throw new ArithmeticException("0으로 나눌 수 없습니다.");
            }
            System.out.println(a/b);
        }
    •JAVA의 주요 예외 클래스
        -IOException: 입출력 작업 중 발생하는 예외
        -SQLException: 데이터베이스 작업 중 발생하는 예외
        -NullPointerException: 객체가 null인데 메소드 호출이나 필드 접근을 시도할 때 발생
        -ArrayIndexOutOfBoundsException: 배열의 유효 범위를 벗어난 인덱스에 접근할 때 발생
        -ArithmeticException: 잘못된 산술 연산 시 발생

12. 추상 클래스 - abstract 키워드를 사용해 정의. 하나 이상의 추상 메소드를 포함하는 클래스
    •특징
        - 구현부가 없는 메소드로 반드시 하위 클래스에서 구현해야함
        - 객체를 직접 생성할 수 없음 → 상속받은 하위 클래스에서만 생성
        - 필드, 생성자, 일반 메소드, 추상 메소드를 모두 포함
    •예제
        abstract class Animal{
            abstract void sound(); -> 추상 메소드(미완성)
            void eat(){
                System.out.println("음식");
            }
        }
        class Cat extends Animal{
            void sound(){ -> 추상 메소드 구현
                System.out.println("야옹");
            }
        }

13. Interface - 모든 메소드가 구현되지 않은 추상 클래스의 극단적인 형태. interface 키워드로 정의
    •특징
        - 직접 객체를 생성할 수 없음 → 선언된 모든 메소드는 상속받은 하위 클래스에서 구현해야함
    •예제
        interface Animal{
            void sound();
            default void eat(){
                System.out.println("음식");
            }
        }
        class Cat implement Animal{
            public void sound(){
                System.out.println("야옹"); 
            }
        }